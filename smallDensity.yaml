
# DCOP name is mandatory.
name: 'Density based IoT optimization'
# The desciption is optional and can span several lines if needed
description: |
  There can be multiple access points in an IoT system. 
  When a new device enters the system, it comes with a set of allowed access points. 
  We need to assign it to an access point such that the density difference in the graphs is minimum. 

# Objective is mandatory and can be min or max
objective: min


# Domains:
# Each domain must have a name, used as a key in the yaml dictionary,
# and a list of values. Type is optional and can be used to identify the kind
# of value in the domain ('luminosity', 'color', etc.)
# The values are expressed as a sequence of values and can be either 
# given extensively like `[A, B, C]` or as a range like `[1 .. 10]`.
# If all values in the domain can be interpreted as a int, the list is a
# list of int, otherwise it is a list of strings. Booleans are also supported.
# An optional initial value can also be given.
domains: 
  density: 
    values: [0 .. 1000]
    type: node_count
    initial_value: 0
  access_points:
    values: [1 .. 10]
    type: access_point_count
  devices:
    values: [1 .. 50]
    type: device_count
  locations:
    values: [1 .. 1]
  only_four:
    values: [4 .. 4]
  

# Variables
# Note: variables must always be defined after the domains
variables:
  #Assuming that we know the mapping before hand for now. 
  #Later this has to be converted into a Dynamic DCOP where devices can be added while the program is running. 

  #Let there be 10 devices and 2 access points
  dev1:
    domain: density
    initial_value: 3
    domain_restriction : [3 .. 3]
    time_required: 3
    location: (3,5)
  dev2:
    domain: density
    domain_restriction: [2 .. 2]
    time_required: 2
    location: (1,6)
  dev3:
    domain: density
    domain_restriction: [1 .. 1]
    time_required: 7
    location: (4,5)
  dev4:
    domain: density
    domain_restriction: [4 .. 4]
    time_required: 8
    location: (5,7)
  dev5:
    domain: density
    domain_restriction: [2,3]
    time_required: 4
    location: (10,4)
  dev6:
    domain: density
    domain_restriction: [1 .. 3]
    time_required: 6
    location: (6,9)
  dev7:
    domain: density
    domain_restriction: [2,3,4]
    time_required: 6
    location: (3,10)
  dev8:
    domain: density
    domain_restriction: [1 .. 4]
    time_required: 7
    location: (12,19)
  dev9:
    domain: density
    domain_restriction: [1,2,3]
    time_required: 8
    location: (2,10)
  dev10:
    domain: density
    domain_restriction: [1,2,3,4]
    time_required: 9
    location: (3,7)
  accessPoints:
    domain: access_points
    domain_restriction: [4 .. 4]
    #time_required: [0 .. 0]
  devicesCount:
    domain: devices
    domain_restriction: [10 .. 10]
    #time_required: [0 .. 0]
  apt1:
    domain: locations
    location: (2,5)
  apt2:
    domain: locations
    location: (3,4)
  apt3:
    domain: locations
    location: (1,2)
  apt4:
    domain: locations
    location: (2,7)


# Constraints
constraints:
  min_density_ap:
    type: intention
    function: |
      connections = []
      for i in range(accessPoints):
        connections.append(0)
      for device in range(devicesCount):
        devName = "dev"+str(device+1)
        connections[locals()[devName]-1] = connections[locals()[devName]-1]+1
      sum = 0
      squareSum = 0
      for i in range(accessPoints):
        sum+=connections[i]
        squareSum += connections[i]*connections[i]
      return abs(1-sum/(accessPoints*squareSum)**0.5);

  #Skewness
  #Physical distance b/w access point and the device
  #Each device specifies the time required - turnaround time
  #Total waiting time -> Time it spends waiting 
  #Move the device to the access point with the least distance -> Not possible

  #Total execution time
  #Since all the agents work independently, total execution time is the maximum of the time required by all the agents.
  min_exec_time:
    type: intention
    function: |
      totalExecTime = []
      for i in range(accessPoints):
        totalExecTime.append(0)
      maxTimePossible = 0
      for device in range(devicesCount):
        devName = "dev"+str(device+1)
        totalExecTime[locals()[devName]-1] = totalExecTime[locals()[devName]-1]+locals()[devName+"_time_required"]
        maxTimePossible += locals()[devName+"_time_required"]
      #print(totalExecTime)
      ### TODO : Normalize this
      return max(totalExecTime)
 
  #Total waiting time
  min_waiting_time:
    type: intention
    function: |
      accessPointsList = list()
      for i in range(accessPoints):
        accessPointsList.append(0)
      totalWaitingTime = 0
      for device in range(devicesCount):
        devName = "dev"+str(device+1)
        accessPointsList[locals()[devName]-1] = locals()[devName+"_time_required"]
        totalWaitingTime += locals()[devName+"_time_required"]
      for ap in accessPointsList:
        totalWaitingTime-=ap
      #print(totalWaitingTime)
      return totalWaitingTime
  
  #Total physical distance between the accessPoints and the devices
  min_distance:
    type: intention
    function: |
      #Calculate the distance of each device from its accessPoint.
      accessPointsList = list()
      for i in range(accessPoints):
        accessPointsList.append(0)
      totalDistance = 0
      for device in range(devicesCount):
        devName = "dev"+str(device+1)
        apLoc = locals()["apt"+str(locals()[devName])+ "_location"]
        apLoc = apLoc[1:-1] #Removing the brackets
        apLoc = tuple(map(int, apLoc.split(','))) #converting the string to tuple of ints
        #ap of the form 3 devName of the form dev2
        loc = locals()[devName+"_location"]
        loc = loc[1:-1]
        loc = tuple(map(int,loc.split(',')))
        #print("The value of loc is {}".format(apLoc))
        totalDistance += (loc[1]-apLoc[1])**2 + (loc[0]-apLoc[0])**2 #Using Euclidean distance
      #print(totalDistance)
      return totalDistance


agents:
  a1: 
    capacity: 100
  a2:
    capacity: 100
  a3:
    capacity: 100
  a4:
    capacity: 100
  a5:
    capacity: 100
  a6:
    capacity: 100
  a7:
    capacity: 100
  a8:
    capacity: 100
  a9:
    capacity: 100
  a10:
    capacity: 100
  a11:
    capacity: 100

#[a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,ap1,ap2,a12,a14,a15,a9,a10,a11]
